name: Nx Build and Deploy
on:
  push:
    branches:
      - '**'
jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      - name: Configure npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      # Cache node_modules for other jobs
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  # Tests job running in parallel with build
  tests:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run tests
        run: |
          echo "Running tests..."
          # npx nx run-many --target=test --all --parallel
          # Add your actual test commands here

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Test & Builds
        run: |
          npx nx run-many --parallel --target=build --projects="api" && npm run ng-swagger
          npx nx run-many --target=build --all --prod
          npm run ngsw
      - run: ls dist
      - name: Archive production artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: nXdist
          path: |
            ./dist
          if-no-files-found: error

  deploy:
    needs: [build, tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
          name: nXdist
      - run: ls
      - run: ls dist
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./dockerfile
          push: true
          tags: '${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_URL_PATH }}:latest'
