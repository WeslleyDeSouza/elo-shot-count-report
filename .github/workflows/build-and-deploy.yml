name: Nx Build and Deploy
on:
  push:
    branches:
      - '**'

env:
  NODE_VERSION: '22'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }} # Enable Nx Cloud for better caching
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  install:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      affected-apps: ${{ steps.affected.outputs.apps }}
      affected-libs: ${{ steps.affected.outputs.libs }}
      has-affected: ${{ steps.affected.outputs.has-affected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for Nx affected commands

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Determine affected projects to optimize build process
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Check affected projects
        id: affected
        run: |
          echo "Checking affected projects..."
          AFFECTED_APPS=$(npx nx print-affected --select=projects --type=app --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} | tr '\n' ' ')
          AFFECTED_LIBS=$(npx nx print-affected --select=projects --type=lib --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} | tr '\n' ' ')
          HAS_AFFECTED=$(npx nx print-affected --select=projects --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} | wc -l)

          echo "apps=$AFFECTED_APPS" >> $GITHUB_OUTPUT
          echo "libs=$AFFECTED_LIBS" >> $GITHUB_OUTPUT
          echo "has-affected=$HAS_AFFECTED" >> $GITHUB_OUTPUT

          echo "Affected apps: $AFFECTED_APPS"
          echo "Affected libs: $AFFECTED_LIBS"

  tests:
    needs: install
    runs-on: ubuntu-latest
    if: needs.install.outputs.has-affected != '0'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.install.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      # Cache Nx computation results
      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/nx
          key: nx-${{ runner.os }}-${{ hashFiles('**/nx.json', '**/project.json', '**/package.json') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Run affected tests
        run: |
          echo "Running tests for affected projects..."
          npx nx affected --target=test --parallel=3 --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Split builds across multiple runners for large monorepos
        runner: [1, 2]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.install.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/nx
          key: nx-${{ runner.os }}-${{ hashFiles('**/nx.json', '**/project.json', '**/package.json') }}
          restore-keys: |
            nx-${{ runner.os }}-

      # Build only affected projects instead of all
      - name: Build affected projects
        run: |
          # Build API first (dependency)
          if echo "${{ needs.install.outputs.affected-apps }}" | grep -q "api"; then
            npx nx build api
            npm run ng-swagger
          fi

          # Build other affected projects in production mode
          npx nx affected --target=build --configuration=production --parallel=3 --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

          # Only run ngsw if we have Angular apps that were affected
          if ls dist/*/ngsw-worker.js 1> /dev/null 2>&1; then
            npm run ngsw
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: List build outputs
        run: ls -la dist/ || echo "No dist directory found"

      - name: Archive production artifacts
        if: github.ref == 'refs/heads/main' && needs.install.outputs.has-affected != '0'
        uses: actions/upload-artifact@v4
        with:
          name: nx-dist-${{ matrix.runner }}
          path: dist/
          retention-days: 30
          if-no-files-found: warn # Changed from error to warn

  # Merge artifacts from parallel builds
  merge-artifacts:
    needs: [build, tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nx-dist-*
          path: ./dist
          merge-multiple: true

      - name: Merge and upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nx-dist-final
          path: dist/
          retention-days: 30

  deploy:
    needs: [merge-artifacts]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nx-dist-final
          path: ./dist

      - name: Verify artifacts
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Dist directory contents:"
          ls -la dist/ || echo "No dist directory found"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_URL_PATH }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build-time optimization
          build-args: |
            BUILDKIT_INLINE_CACHE=1
